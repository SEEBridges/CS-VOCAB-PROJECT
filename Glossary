import java.util.Scanner;
import java.io.File;
import java.io.FileWriter;
import java.io.PrintWriter;
import java.io.IOException;
/**
 * The Glossary class.
 *
 * @author (Josh Martin, Carter Bridges)
 * @version (11/28/2022)
 */
public class Glossary
{
    public final int WORD_COUNT = 210;
    private int numEntries;
    private Entry[] entries;
    public static void main(String[] args) throws IOException
    {
        Glossary g2 = new Glossary();
        g2.readFile("VocabList.txt");
        System.out.println(g2.toString());
        System.out.println(g2.entries.length);
    }

    /**
     * No-arg constructor for objects of class Glossary.
     */
    public Glossary()
    {
        numEntries = 0;
        entries = new Entry[WORD_COUNT];
    }

    /**
     * N-arg constructor for objects of class Glossary.
     * 
     * @param initialSize size of entry array for glossary
     */
    public Glossary(int initialSize)
    {
        numEntries = 0;
        entries = new Entry[initialSize];
    }

    /**
     * Method getNumEntries.
     *
     * @return The number of enries in glossary
     */
    public int getNumEntries()
    {
        return entries.length;
    }

    /**
     * Method getEntries.
     *
     * @return The entries in the glossary
     */
    public Entry[] getEntries()
    {
        return entries;
    }

    /**
     * Method readFile.
     *
     * @param filename name of file to read
     */
    public void readFile(String filename) throws IOException
    {
        File file = new File(filename);
        Scanner inputFile = new Scanner(file);
        int i = 0;
        while (inputFile.hasNext() == true)
        {
            String str = inputFile.nextLine();
            String[] arrOfStr = str.split(":");
            addEntry(new Entry(arrOfStr[i],arrOfStr[i + 1]));
        }
        i += 2;
        inputFile.close();
    }

    /**
     * Method addEntry.
     *
     * @param entry to be added
     */
    public void addEntry(Entry entry)
    {
        entries[numEntries] = entry;
        numEntries++;
    }

      /**
     * Method removeEntry.
     * 
     * @param entry to be added
     */
    public void removeEntry(String term)
    {
        int index = -1;
        for (int i = 0; i < numEntries; i++)
        {
            if (entries[i].getTerm().equalsIgnoreCase(term))
            {
                entries[i] = null;
                index = i;
            }
        }
        numEntries--;
        shift(index);
    }   

    /**
     * Method shift.
     *
     * @param index index to shift down to
     */
    public void shift(int index)
    {
        if (index != -1)
        {
            for (int i = index; i < entries.length - 1; i++)
            {
                entries[i] = entries[i + 1];
            }
        }
    }

    /**
     * Method toString.
     *
     * @return The string representation of the glossary
     */
    public String toString()
    {
        for (int i = 0; i < entries.length; i++)
        {
            if (entries[i] != null)
            {
                String str = entries[i] + "" + entries[i + 1];
                return str;
            }
        }
        return "";
    }
}
